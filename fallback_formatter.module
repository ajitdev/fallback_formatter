<?php
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function fallback_formatter_theme() {
  return array(
    'fallback_formatter_settings_order' => array(
      'render element' => 'element',
      'function' => 'theme_fallback_formatter_settings_order',
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function fallback_formatter_field_formatter_info_alter(&$info) {
  // Only enable the fallback formatter for field_types that already have one
  // or more formatters.
  $field_types = array();
  foreach ($info as $index => $formatter) {
    $field_types = array_merge($field_types, $formatter['field_types']);
  }
  $counts = array_count_values($field_types);
  foreach ($counts as $field_type => $count) {
    if ($count > 1) {
      $info['fallback']['field_types'][] = $field_type;
    }
  }
}

/**
 * Gets possible formatters for the given field type.
 *
 * @param string $field_type
 *   Field type for which we want to get the possible formatters.
 *
 * @return array
 *   Formatters info array.
 */
function fallback_formatter_get_possible_formatters($field_type) {
  $return = array();

  foreach (\Drupal::service('plugin.manager.field.formatter')->getDefinitions() as $formatter => $info) {
    // The fallback formatter cannot be used as a fallback formatter.
    if ($formatter == 'fallback') {
      continue;
    }
    // Check that the field type is allowed for the formatter.
    elseif (!in_array($field_type, $info['field_types'])) {
      continue;
    }
    // Formatters tagged as 'multiple' that render all items as one element
    // instead of one element per item delta will fail fallback detection.
    elseif (isset($info['behaviors']['multiple'])) {
      continue;
    }
    else {
      $return[$formatter] = $info;
    }
  }

  return $return;
}

/**
 * Themes the formatter settings form.
 *
 * @param array $variables
 *   Theme variables.
 *
 * @return string
 *   Rendered HTML of the settings form part.
 */
function theme_fallback_formatter_settings_order($variables) {
  $element = $variables['element'];

  // Fallback formatter order (tabledrag).
  $rows = array();
  foreach (Element::children($element, TRUE) as $name) {
    $element[$name]['weight']['#attributes']['class'][] = 'fallback-formatter-order-weight';
    $rows[] = array(
      'data' => array(
        drupal_render($element[$name]['label']),
        drupal_render($element[$name]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  $table = &$element[];

  $table = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#attributes' => array('id' => 'fallback-formatter-order'),
  );

  drupal_attach_tabledrag($table, array(
    'table_id' => 'fallback-formatter-order',
    'action' => 'order',
    'relationship' => 'sibling',
    'group' => 'fallback-formatter-order-weight'
  ));

  return drupal_render($element);
}
